/**
Layout provides several shortcuts for sizing and aligning standard components.
Depends on <_util.scss>  and <_base.scss> for some mixins.

Correct structuring to use this layout is like:


	<body>
		<header class="row">
			<div class="container">
				<div class="col-2-3">
					(fills 66% of width)
				</div>
				<div class="col-1-3">
					(fills 33% of width)
				</div>
			</div>
		</header>

	</body>


**/

$content-wrapper: 'div#bodywrapper' !default;
$content-width: 48em !default;



html, body {
	height: 100%;
	margin: 0;
	padding: 0;
}

body {
	position: relative;
}

*, *:after, *:before {
	-webkit-box-sizing: border-box;
	-moz-box-sizing: border-box;
	box-sizing: border-box;
}



// Implements a grid-style layout with 3 or 4 columns.
@mixin columns {
	
	[class*="col-"] {
		float: left;
		padding-right: 2em;
		height: 100%;
	}
	
	[class*='col-']:last-of-type {
		padding-right: 0;
	}
	
	.col-1-2 {
		width: 50%;
		@include small {
			width: 100%;
		}
	}
	
	.col-1-3 {
		width: 33.33%;
		@include small {
			width: 100%;
		}
	}
	
	.col-1-4 {
		width: 25%;
		@include small {
			width: 100%;
		}
	}
	
	.col-3-4 {
		width: 75%;
		@include small {
			width: 100%;
		}
	}
	
	.col-2-3 {
		width: 66.66%;
		@include small {
			width: 100%;
		}
	}
	
	
}


// Rows enforce vertical separation
%row, .row {
	@extend %clearfix;
	width: 100%;
	display: block;
	clear: both;
}

// Containers enforce horizontal content sizing 
%container, .container {
	display: block;
	clear: both;

	&.only, &.alone, &.row {
		@extend %row;

	}
	
	&.pad { // specifically containers that have pads
		padding: 1em;
	}


	margin-left: 0.5rem;
	margin-right: 0.5rem;

	@include large {
		margin-left: 2.5em;
		margin-left: auto;
		margin-right: auto;
	}

	@include columns;
}


.container {
	max-width: $content-width;
}




// In case the site somehow embeds rows within rows... etc
.row .row, .container .container {
	padding: 0;
	margin: 0;
}


#{$content-wrapper} {

	height: 100%;

	@mixin large {
		width: 100%;
		max-width: 100%;
	
	}

}




/**********************/
/* Convenience styles */

.hidden {
	display: none;
}

// this seems redundant...
div.hidden, span.hidden, section.hidden {
	display: none;
}

// Fixed-width elements should retain their width when hidden.
div.fixedwidth.hidden, span.fixedwidth.hidden, tr.hidden {
	visibility: hidden;
	max-height: 0;
	min-height: 0;
	height: 0;
}

.nopadding {
	padding: 0 !important;
}

.nomargin {
	margin: 0;
}

.hide-small {
	display: inline-block;
	@include small {
		display: none;
	}
}

.show-small {
	display: none;

	@include small {
		display: inline-block;
	}

}


span.avoidwrap { display:inline-block; }

.scrollable {
	overflow-y: auto;
}

.center {
	text-align: center;
}

.vcenter {
	vertical-align: middle;
}

.float.right {
	// This element will float to the right within its parent.
	float: right;
}

.right {
	// Inner content will be right-aligned.
	vertical-align: right;
	text-align: right;
}

* + .fillright {
	float: left;
	clear: left;
}

.fillright {
	clear: right;
	float: right;
	text-align: right;
	display: block;
}


aside, h1, h2, h3, h4, h5, h6  {
	&.inline {
		display: inline-block;
	}
}

